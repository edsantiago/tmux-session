#!/usr/bin/perl
#
# tmux-session - convenience wrappers for tmux
#
# $Id: tmux-session,v 1.3 2011/01/05 15:07:45 esm Exp esm $
#
package Tmux::Session;

use strict;
use warnings;

(our $ME = $0) =~ s|.*/||;
(our $VERSION = '$Revision: 1.3 $ ') =~ tr/[0-9].//cd;

# For debugging, show data structures using DumpTree($var)
#use Data::TreeDumper; $Data::TreeDumper::Displayaddress = 0;

use IPC::Run                    qw(run timeout);
use List::Util                  qw(max);

###############################################################################
# BEGIN user-customizable section

# Will be set in the 'actions' block below
our @actions;

# END   user-customizable section
###############################################################################

###############################################################################
# BEGIN boilerplate args checking, usage messages

sub usage {
    # Special case: --help for a particular action
    if (@ARGV) {
        my $action = _find_action($ARGV[0]);
        printf <<"END_USAGE";
Usage: $ME $action->{name} $action->{args}

$action->{desc}
END_USAGE
        exit;
    }

    print  <<"END_USAGE";
Usage: $ME [OPTIONS] ARGS [...]

blah blah blah

ACTIONS:

END_USAGE

    my $maxlen = max map { length($_->{name}) } @actions;

    for my $action (@actions) {
        printf "  %-*s  %s\n", $maxlen, $action->{name}, $action->{blurb};
    }
    print <<"END_USAGE";

OPTIONS:

  -v, --verbose  show verbose progress indicators
  -n, --dry-run  make no actual changes

  --help         display this message
  --man          display program man page
  --version      display program name and version
END_USAGE

    exit;
}

sub man {
    # Read the POD contents.  If it hasn't been filled in yet, abort.
    my $pod = do { local $/; <DATA>; };
    if ($pod =~ /=head1 \s+ NAME \s+ FIXME/xm) {
        warn "$ME: No man page available.  Please try $ME --help\n";
        exit;
    }

    # Use Pod::Man to convert our __DATA__ section to *roff
    eval { require Pod::Man }
        or die "$ME: Cannot generate man page; Pod::Man unavailable: $@\n";
    my $parser = Pod::Man->new(name => $ME, release => $VERSION, section => 1);

    # If called without output redirection, man-ify.
    my $out_fh;
    if (-t *STDOUT) {
        my $pager = $ENV{MANPAGER} || $ENV{PAGER} || 'less';
        open $out_fh, "| nroff -man | $pager";
    }
    else {
        open $out_fh, '>&STDOUT';
    }

    # Read the POD contents, and have Pod::Man read from fake filehandle.
    # This requires 5.8.0.
    open my $pod_handle, '<', \$pod;
    $parser->parse_from_filehandle($pod_handle, $out_fh);
    exit;
}


# Command-line options.  Note that this operates directly on @ARGV !
our $debug   = 0;
our $force   = 0;
our $verbose = 0;
our $NOT     = '';              # print "blahing the blah$NOT\n" if $debug
sub handle_opts {
    use Getopt::Long;
    GetOptions(
        'debug:n'    => \$debug,
        'dry-run|n!' => sub { $NOT = ' [NOT]' },
        'force'      => \$force,
        'verbose|v'  => \$verbose,

        help         => \&usage,
        man          => \&man,
        version      => sub { print "$ME version $VERSION\n"; exit 0 },
    ) or die "Try `$ME --help' for help\n";
}

# END   boilerplate args checking, usage messages
###############################################################################
# BEGIN actions
#
# Actions are in @actions.  Each action is a hash containing a name (what
# the user will type), a short description (for --help), a long description
# (for full --help) and a CODE ref.
#

push @actions, {
    name  => 'list',
    blurb => 'list active sessions and windows',
    args  => '',
    desc  => <<'END_DESC',
FIXME
END_DESC
    code  => sub {
        @_ == 0
            or die "$ME: This command takes no arguments\n";

        # FIXME: include panes
        # FIXME: remove whitespace?
        # FIXME: include window index as well as names?
        my $sessions = tmux_sessions();

        # Pass 1: maxlen. This gives us a nicely-aligned display
        my %maxlen = (sess => -1, win => [ (-1) x 100 ]);
        for my $session (sort keys %$sessions) {
            $maxlen{sess} = max( $maxlen{sess}, length($session) );

            my $windows = $sessions->{$session};
            for my $i (0 .. $#{$windows}) {
                if (my $window = $windows->[$i]) {
                    $maxlen{win}[$i]
                        = max( ($maxlen{win}[$i]||0),
                               length($window->[0]{name}) );
                }
            }
        }

        # Pass 2: display each session with its windows, eg
        #    main > 0:root 1:mutt 2:misc
        for my $session (sort keys %$sessions) {
            printf "%-*s >", $maxlen{sess}, $session;

            for my $i (0 .. $#{$sessions->{$session}}) {
                if (my $window = $sessions->{$session}[$i]) {
                    printf " %d:%-*s", $i, $maxlen{win}[$i], $window->[0]{name};
                    # FIXME: panes?  That would require a new maxlen
                }
                else {
                    print ' ' x ($maxlen{win}[$i] + length($i) + 2);
                }
            }
            print  "\n";
        }
    }
};


###############################################################################

push @actions, {
    name  => 'mywindowid',
    blurb => 'output the name of the window which invoked this script',
    args  => '',
    desc  => <<"END_DESC",
This is used in bash scripts to determine an ID for the window
in which this command is being run.

Result will be printed to stderr, and will be of the form:

   <session>.<window>[.<pane>]
eg  main.cpan
    devel.bz12345.1   (.0 never shows as a pane, only .1 and up)

If invoked from outside a tmux session, $ME emits
an empty string but exits 0 (success).
END_DESC
    code  => sub {
        @_ == 0
            or die "$ME: This command takes no arguments\n";

        if (my $pane = _current_pane()) {
            print $pane->{session_name}, '.';

            # title-less windows (bash, zsh): just show the index
            if ($pane->{name} =~ /^(ba|z)sh$/) {
                print $pane->{window_index};
            }
            else {
                print $pane->{name};
            }

            # Most windows don't have panes. If we do, print it.
            if ($pane->{pane_index} != 0) {
                print '~', $pane->{pane_index};
            }

            print  "\n";
            return;
        }
    }
};

###############################################################################

push @actions, {
    name  => 'new-window',
    blurb => q(create a named window (including session) if it doesn't exist),
    args  => '',
    desc  => <<"END_DESC",
This can be run by hand or from .xsession
END_DESC
    code  => sub {
        @_
            or die "$ME: This command requires at least one session.window\n";

        my @want;

        # Pass 1: validity check on session.window names
        for my $name (@_) {
            # eg main.foo or just plain 'foo'
            $name =~ /^((\w+)\.)?([\w-]+)$/
                or die "$ME: Invalid window name '$name'; must be <xxx>.<yyy> or just <yyyy>\n";
            my ($session, $window) = ($2, $3);
            if (! defined $session) {
                my $pane = _current_pane()
                    or die "$ME: Window name must include session name, eg foo.$window\n";
                $session = $pane->{session_name};
            }
            push @want, [ $session, $window ];
        }

        # Pass 2: create sessions as needed
        for my $pair (@want) {
            my ($session, $window) = @$pair;

            _create_window(  $session, $window );
        }
    }
};

sub _create_window {
    my $desired_session = shift;
    my $desired_window  = shift;

    my $new_windowid;           # Set only if the session exists

    my $sessions = tmux_sessions();
    if (my $windows = $sessions->{$desired_session}) {
        # Session exists. Look for desired window.
        for my $i (0 .. $#$windows) {
            if (my $window = $windows->[$i]) {
                if ($window->[0]{name} eq $desired_window) {
                    # Window already exists in this session. Bail out.
                    warn "$ME: $desired_session.$desired_window already exists\n";
                    return;
                }
            }
            else {
                # Undefined window = gap between two windows. Reuse the number.
                $new_windowid //= $i;
            }
        }

        # In case there are no gaps between windows
        $new_windowid //= @$windows;
    }

    # Window not found. Create it.
    # Command to run depends on whether the session exists or not
    my @cmd = ('tmux');
    if (defined $new_windowid) {
        push @cmd, 'new-window', '-t' => "$desired_session:$new_windowid";
    }
    else {
        push @cmd, 'new-session', '-d', '-s' => $desired_session,
    }
    # -n option is the same for both
    push @cmd, '-n' => $desired_window;
    print "@cmd$NOT\n"                          if $verbose || $NOT;

    unless ($NOT) {
        system(@cmd) == 0
            or die "$ME: command failed: @cmd\n";
    }
}


# END   actions
###############################################################################

############################## CODE BEGINS HERE ###############################

# The term is "modulino".
__PACKAGE__->main()                                     unless caller();

# Main code.
sub main {
    # Note that we operate directly on @ARGV, not on function parameters.
    # This is deliberate: it's because Getopt::Long only operates on @ARGV
    # and there's no clean way to make it use @_.
    handle_opts();                      # will set package globals

    # Fetch the desired action.
    my $action = _find_action( shift @ARGV );

    # Invoke the handler code
    $action->{code}->( @ARGV );
}


##################
#  _find_action  #  Given a (possibly abbrvtd) action name, return full info
##################
sub _find_action {
    my $abbr = shift;                   # in: possibly-abbreviated action name

    # Invoked without an argument?
    die "$ME: Missing ACTION argument; try $ME --help\n"        if !$abbr;

    # Try various ways to match: exact, match at start, match anywhere.
    # If any of those is ambiguous, we must barf.
    for my $re (qr/^$abbr$/i, qr/^$abbr/i, qr/$abbr/i) {
        my @match = grep { $_->{name} =~ /$re/ } @actions;
        return $match[0]            if @match == 1;

        if (@match > 1) {
            my $x = join(', ', map { $_->{name} } @match);
            die "$ME: '$abbr' is ambiguous: matches $x\n";
        }
    }

    die "$ME: No match for action '$abbr'.  Try $ME --help\n";
}


###############################################################################
# BEGIN helper code

###################
#  tmux_sessions  #  Returns a hash keyed on session name, with windows > panels
###################
sub tmux_sessions {
    my $sessions = {};

    # Sample output from tmux list-panes -a:
    #    main:0.0: [80x74] [history 648/2000, 343330 bytes] %0 (active)
    #    main:1.0: [80x13] [history 31/2000, 23596 bytes] %1
    #    main:1.1: [80x60] [history 1948/2000, 1362162 bytes] %2 (active)
    #    main:2.0: [80x74] [history 78/2000, 59992 bytes] %4 (active)
    #    wide:0.0: [160x60] [history 1859/2000, 1035084 bytes] %5 (active)
    #    wide:1.0: [160x60] [history 0/2000, 0 bytes] %6 (active)
    #    wide:2.0: [160x60] [history 0/2000, 0 bytes] %7 (active)
    #    wide:3.0: [160x60] [history 0/2000, 0 bytes] %8 (active)
    #
    my ($stdout, $stderr);

    my @cmd = ('tmux', 'list-panes', '-a',
               -F => '#{session_name}:#{window_index}:#{pane_index}: [#{window_name}] @ #{pane_tty}');

    print "@cmd\n"   if $verbose;
    my $status = run \@cmd, \undef, \$stdout, \$stderr, timeout(30);

    if ($?) {
        #               (tmux 1.3)       (tmux 1.4)
        if ($stderr =~ /server not found|failed to connect to server/) {
            return { sessions => [] };
        }
        die "$ME: command failed: @cmd\n";
    }

    open my $tmux_fh, '<', \$stdout
        or die "$ME: internal error reading from string: $!";

  LINE:
    while (my $line = <$tmux_fh>) {
        print $line if $debug & 0x10;
        chomp $line;
        $line =~ /^(\S+):(\d+):(\d+):\s+\[(\S+)\]\s+\@\s+(\S+)$/
            or die "$ME: Could not grok list-panes line '$line'\n";
        my ($session_name, $window_index, $pane_index, $window_name, $tty) =
            ($1, $2, $3, $4, $5);
        $sessions->{$session_name}[$window_index][$pane_index] = {
            session_name => $session_name,
            window_index => $window_index,
            pane_index   => $pane_index,
            name         => $window_name,
            tty          => $tty,
        };
    }
    close $tmux_fh;


    #print DumpTree($info);
    return $sessions;
}

###################
#  _current_pane  #  Returns a session info hash for the current pane, or undef
###################
sub _current_pane {
    # Name of current tty.  If not a tty, bail out now
    chomp(my $tty = qx{tty});
    die "$ME: $tty\n"               if $? != 0;

    my $sessions = tmux_sessions();
    for my $session (keys %{ $sessions }) {
        for my $window (@{ $sessions->{$session} }) {
            for my $pane (@{$window}) {
                if ($pane->{tty} eq $tty) {
                    return $pane;
                }
            }
        }
    }

    return;
}

# END   helper code
###############################################################################

1;

__DATA__

###############################################################################
#
# Documentation
#

=head1	NAME

FIXME - description of what this script does

=head1	SYNOPSIS

FIXME [B<--foo>]  [B<--bar>]  [B<--verbose>] ARG1 [ARG2...] FIXME

FIXME  B<--help>  |  B<--version> | B<--man>

=head1	DESCRIPTION

B<FIXME> grobbles the frobniz on alternate Tuesdays, except where
prohibited by law.

=head1	OPTIONS

=over 4

=item B<--foo>

FIXME

=item B<--verbose>

Show progress messages.

=item B<--help>

Emit usage hints.

=item B<--version>

Display program version.

=item B<--man>

Display this man page.

=back


=head1	DIAGNOSTICS

FIXME

=head1	ENVIRONMENT

FIXME

=head1	FILES

FIXME

=head1	RESTRICTIONS

FIXME

=head1	SEE ALSO

FIXME

e.g. L<Foo::Bar|Foo::Bar>

=head1	AUTHOR

Your Name <ed@edsantiago.com>

Please report bugs or suggestions to <ed@edsantiago.com>

=cut
